<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration  status="OFF" monitorInterval="30">
    <!--先定义所有的appender-->
    <properties>
        <property name="LOG_HOME">D:\logs</property>
        <property name="FILE_NAME">YiQingManageSystem</property>
    </properties>

    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        </Console>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${FILE_NAME}/logs/info.log"
                     filePattern="${LOG_HOME}/${FILE_NAME}/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log" immediateFlush="true">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout
                    pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n" />
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>
        <RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/${FILE_NAME}/logs/warn.log"
                     filePattern="${LOG_HOME}/${FILE_NAME}/logs/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log" immediateFlush="true">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout
                    pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n" />
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>
        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/${FILE_NAME}/logs/error.log"
                     filePattern="${LOG_HOME}/${FILE_NAME}/logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log" immediateFlush="true">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout
                    pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread][%file:%line] - %msg%n" />
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>
    </Appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>

        <Logger name="com.yjq.programmer" level="debug" additivity="true">
            <!-- 这里是输入到日志文件-->
            <!--  <AppenderRef ref="RollingFileInfo" />
              <AppenderRef ref="RollingFileWarn" />
              <AppenderRef ref="RollingFileError" />-->
            <!-- 这里是输入到控制台-->
            <AppenderRef ref="Console" />
        </Logger>

        <!-- SQL语句输出-->
        <Logger name="com.yjq.programmer.dao" level="debug" additivity="false">
            <!-- 这里是输入到日志文件-->
            <!-- <AppenderRef ref="RollingFileInfo" />-->
            <!-- 这里是输入到控制台-->
            <AppenderRef ref="Console"/>
        </Logger>

        <Root level="debug">
            <!-- 这里是输入到日志文件-->
            <!--<AppenderRef ref="RollingFileInfo"/>
            <AppenderRef ref="RollingFileWarn"/>
            <AppenderRef ref="RollingFileError"/>-->
            <!-- 这里是输入到控制台-->
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>



</Configuration>
